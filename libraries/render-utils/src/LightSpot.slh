//  Generated on <$_SCRIBE_DATE$>
//
//  Created by Sam Gateau on 7/5/16.
//  Copyright 2016 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include ShadingModel.slh@>

<@func declareLightingSpot(supportScattering)@>

void evalLightingSpot(out vec3 diffuse, out vec3 specular, Light light,
    vec4 fragLightDirLen, float cosSpotAngle, SurfaceData surface,
    float metallic, vec3 fresnel, vec3 albedo, float shadow
<@if supportScattering@>
    , float scattering, vec4 midNormalCurvature, vec4 lowNormalCurvature
<@endif@>
    ) {

    // Allright we re valid in the volume
    float fragLightDistance = fragLightDirLen.w;
    vec3 fragLightDir = fragLightDirLen.xyz;

    updateSurfaceDataWithLight(surface, fragLightDir);

    // Eval attenuation  
    float radialAttenuation = lightIrradiance_evalLightAttenuation(light.irradiance, fragLightDistance);
    float angularAttenuation = lightIrradiance_evalLightSpotAttenuation(light.irradiance, cosSpotAngle);
    vec3 lightEnergy = angularAttenuation * radialAttenuation * shadow *getLightIrradiance(light);

    // Eval shading
    evalFragShading(diffuse, specular, metallic, fresnel, surface, albedo
<@if supportScattering@>
    ,scattering, midNormalCurvature, lowNormalCurvature
<@endif@>
    );
    
    lightEnergy *= isSpotEnabled();
    diffuse *= lightEnergy * isDiffuseEnabled();
    specular *= lightEnergy * isSpecularEnabled();

    if (isShowLightContour() > 0.0) {
        // Show edges
        float edgeDistR = (lightVolume_getRadius(light.volume) - fragLightDistance);
        float edgeDistS = dot(fragLightDistance * vec2(cosSpotAngle, sqrt(1.0 - cosSpotAngle * cosSpotAngle)), -lightVolume_getSpotOutsideNormal2(light.volume));
        float edgeDist = min(edgeDistR, edgeDistS);
        float edge = abs(2.0 * (edgeDist * 10.0) - 1.0);
        float edgeCoord = exp2(-8.0 * edge * edge);
        diffuse = mix(diffuse, vec3(edgeCoord * edgeCoord * getLightColor(light)), float(edge < 1.0));
    }
}

<@endfunc@>

<@func declareDrawSpotOutline()@>

bool evalLightSpotEdge(out vec3 color, Light light, vec4 fragLightDirLen, float cosSpotAngle, vec3 fragEyeDir) {
    // Allright we re valid in the volume
    float fragLightDistance = fragLightDirLen.w;
    vec3 fragLightDir = fragLightDirLen.xyz;
    
    // Show edges
    float edgeDistR = (lightVolume_getRadius(light.volume) - fragLightDistance);
    float edgeDistS = dot(fragLightDistance * vec2(cosSpotAngle, sqrt(1.0 - cosSpotAngle * cosSpotAngle)), -lightVolume_getSpotOutsideNormal2(light.volume));
    float edgeDist = min(edgeDistR, edgeDistS);
    float edge = abs(2.0 * (edgeDist * 10.0) - 1.0);
    float edgeCoord = exp2(-8.0 * edge * edge);
    color = mix(color, vec3(edgeCoord * edgeCoord * getLightColor(light)), float(edge < 1.0));

    return (edge < 1.0);
}

<@endfunc@>
