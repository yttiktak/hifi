<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//  proceduralSkybox.frag
//  fragment shader
//
//  Created by Sam Gateau on 5/5/2015.
//  Copyright 2015 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//
<@include graphics/ShaderConstants.h@>

LAYOUT(binding=GRAPHICS_TEXTURE_SKYBOX) uniform samplerCube cubeMap;

struct Skybox {
    vec4 color;
};

LAYOUT(binding=GRAPHICS_BUFFER_SKYBOX_PARAMS) uniform skyboxBuffer {
    Skybox skybox;
};

layout(location=0) in vec3  _normal;
layout(location=0) out vec4 _fragColor;

<@include procedural/ProceduralCommon.slh@>

#line 1001
//PROCEDURAL_BLOCK_BEGIN
vec3 getSkyboxColor() {
    return vec3(abs(sin(iGlobalTime / 5.0)), 1.0, 0.0);
}
//PROCEDURAL_BLOCK_END

#line 2038
void main(void) {
    vec3 color = getSkyboxColor();
    // Protect from NaNs and negative values
    color = mix(color, vec3(0), isnan(color));
    color = max(color, vec3(0));
    // Procedural Shaders are expected to be Gamma corrected so let's bring back the RGB in linear space for the rest of the pipeline
    color = pow(color, vec3(2.2));
    _fragColor = vec4(color, 1.0);
}
